---
apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: postgres-database-template
  title: CNPG database template
  description: |
    Creates a PostgreSQL database using CloudNative-PG operator with managed credentials and External Secrets integration.

    This template provisions:
    - A dedicated database user (role) with login credentials
    - A new database owned by the user
    - Kubernetes secrets with connection details (username, password, host, port, URL)
    - External Secrets for syncing credentials to application namespaces

    Optionally integrates with existing applications by:
    - Creating ExternalSecrets with custom key mappings
    - Mounting database credentials into workloads as environment variables
    - Configuring RBAC permissions for cross-namespace secret access
spec:
  owner: group:default/talbots_court
  type: database
  parameters:
    - title: Database
      required:
        - name
      ui:order:
        - message
        - name
      properties:
        message:
          type: 'null'
          description: |
            This template will create three items:
             - a role (user)
             - a database
             - a secret containing the credentials

            All with the name you supply below.  
            Please __do not include__ "db" or "database" in the name.
        name:
          title: Database name
          type: string
          description: A unique name
          pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
          ui:autofocus: true
          ui:options:
            rows: 5
          ui:help: 'Must be lowercase alphanumeric with optional hyphens (no leading/trailing hyphens)'

    - title: Target Application (Optional)
      required: []
      ui:order:
        - kustomizeUrl
        - workloadUrl
        - secretMappingMessage
        - secretUsername
        - secretDbname
        - secretHost
        - secretPort
        - secretUrl
        - secretPassword
        - crbUrl
      properties:

        crbUrl:
          type: string
          title: External Secrets CRB URL
          default: https://github.com/jDmacD/catalogue/blob/main/external-secrets/kustomize/kubernetes/clusterrolebinding.yaml

        kustomizeUrl:
          title: URL to kustomization.yaml
          type: string
          pattern: '^https:\/\/github\.com\/.+\/kustomization\.yaml$'
          ui:help: 'Must be a valid URL starting with https://github.com and ending with kustomization.yaml'

        workloadUrl:
          title: URL to workload (statefulset or deployment)
          type: string
          pattern: '^https:\/\/github\.com\/.+\/(deployment|statefulset)\.yaml$'
          ui:help: 'Must be a valid URL starting with https://github.com and ending with statefulset.yaml or deployment.yaml'

        secretMappingMessage:
          type: 'null'
          description: |
            The keys of the database secrets need to be mapped to  
            environment variables to be mounted into the workload.    
            The available keys are:
            - username
            - dbname
            - host
            - port
            - url
            - password
            
            Blank values will be omitted.
            
        secretUsername:
          title: username
          type: string
          ui:placeholder: DB_USERNAME

        secretDbname:
          title: dbname
          type: string
          ui:placeholder: DB_NAME

        secretHost:
          title: host
          type: string
          ui:placeholder: DB_HOST

        secretPort:
          title: port
          type: string
          ui:placeholder: DB_PORT

        secretUrl:
          title: url
          type: string
          ui:placeholder: DB_URL

        secretPassword:
          title: password
          type: string
          ui:placeholder: DB_PASSWORD
  
  steps:

    - id: templateExternalSecret
      name: Template External Secret
      action: fetch:template:file
      input:
        url: ./content/cloudnative-pg/cluster/kustomize/externalsecret/externalsecret.yaml
        targetPath: ./cloudnative-pg/cluster/kustomize/externalsecret/${{ parameters.name }}.yaml
        values:
          name: ${{ parameters.name }}

    - id: templateDatabase
      name: Template Databaser
      action: fetch:template:file
      input:
        url: ./content/cloudnative-pg/cluster/kustomize/database/database.yaml
        targetPath: ./cloudnative-pg/cluster/kustomize/database/${{ parameters.name }}.yaml
        values:
          name: ${{ parameters.name }}

    - id: fetchCluster
      name: Fetch Cluster Definition
      action: fetch:plain:file
      input:
        url: https://github.com/jDmacD/catalogue/blob/main/cloudnative-pg/cluster/kustomize/cluster.yaml
        targetPath: ./cloudnative-pg/cluster/kustomize/cluster.yaml

    - id: mergeCluster
      name: Merge Role Into Cluster Definition
      action: roadiehq:utils:merge
      input:
        path: ./cloudnative-pg/cluster/kustomize/cluster.yaml
        mergeArrays: true
        preserveYamlComments: true
        content:
          spec:
            managed:
              roles:
                - name: ${{ parameters.name }}
                  ensure: present
                  comment: ${{ parameters.name }} application user
                  connectionLimit: -1
                  login: true
                  passwordSecret:
                    name: ${{ parameters.name }}

    - id: fetchDatabaseKustomize
      name: Fetch Database Kustomize
      action: fetch:plain:file
      input:
        url: https://github.com/jDmacD/catalogue/blob/main/cloudnative-pg/cluster/kustomize/database/kustomization.yaml
        targetPath: ./cloudnative-pg/cluster/kustomize/database/kustomization.yaml

    - id: mergeDatabaseKustomize
      name: Merge Database Kustomize
      action: roadiehq:utils:merge
      input:
        path: ./cloudnative-pg/cluster/kustomize/database/kustomization.yaml
        mergeArrays: true
        preserveYamlComments: true
        content:
          resources:
            - ${{ parameters.name }}.yaml

    - id: fetchExternalsecretKustomize
      name: Fetch External Secret Kustomize
      action: fetch:plain:file
      input:
        url: https://github.com/jDmacD/catalogue/blob/main/cloudnative-pg/cluster/kustomize/externalsecret/kustomization.yaml
        targetPath: ./cloudnative-pg/cluster/kustomize/externalsecret/kustomization.yaml

    - id: mergeExternalsecretKustomize
      name: Merge External Secret Kustomize
      action: roadiehq:utils:merge
      input:
        path: ./cloudnative-pg/cluster/kustomize/externalsecret/kustomization.yaml
        mergeArrays: true
        preserveYamlComments: true
        content:
          resources:
            - ${{ parameters.name }}.yaml

# Everything from here down is optional

    - id: logKustomize
      if: ${{ parameters.kustomizeUrl }}
      name: Format path to kustomize
      action: debug:log
      input:
        message: ${{ parameters.kustomizeUrl.split('/blob/').pop().split('/').slice(1).join('/') }}

    - id: logPath
      if: ${{ parameters.kustomizeUrl }}
      name: Format path to dir
      action: debug:log
      input:
        message: ${{ parameters.kustomizeUrl.split('/blob/').pop().split('/').slice(1, -1).join('/') }}

    - id: fetchTargetKustomize
      if: ${{ parameters.kustomizeUrl }}
      name: Fetch Kustomize File
      action: fetch:plain:file
      input:
        url: ${{ parameters.kustomizeUrl }}
        targetPath: ./${{ parameters.kustomizeUrl.split('/blob/').pop().split('/').slice(1).join('/') }}
        
    - id: mergeTargetKustomize
      if: ${{ parameters.kustomizeUrl }}
      name: Add to Resource List
      action: roadiehq:utils:merge
      input:
        path: ./${{ parameters.kustomizeUrl.split('/blob/').pop().split('/').slice(1).join('/') }}
        mergeArrays: true
        preserveYamlComments: true
        content:
          resources:
            - centralexternalsecret.yaml

    - id: templateTargetExternalSecret
      if: ${{ parameters.kustomizeUrl }}
      name: Template External Secret
      action: fetch:template:file
      input:
        url: ./content/target/externalsecret.yaml
        targetPath: ./${{ parameters.kustomizeUrl.split('/blob/').pop().split('/').slice(1, -1).join('/') }}/centralexternalsecret.yaml
        values:
          name: ${{ parameters.name }}
          secretUsername: ${{ parameters.secretUsername }}
          secretDbname: ${{ parameters.secretDbname }}
          secretHost: ${{ parameters.secretHost }}
          secretPort: ${{ parameters.secretPort }}
          secretUrl: ${{ parameters.secretUrl }}
          secretPassword: ${{ parameters.secretPassword }}

    - id: fetchTargetWorkload
      if: ${{ parameters.workloadUrl }}
      name: Fetch workload
      action: fetch:plain:file
      input:
        url: ${{ parameters.workloadUrl }}
        targetPath: ./${{ parameters.workloadUrl.split('/blob/').pop().split('/').slice(1).join('/') }}
        
    - id: mergeTargetWorkload
      if: ${{ parameters.workloadUrl }}
      name: Merge Secret into Workload
      action: roadiehq:utils:jsonata:yaml:transform
      input:
        path: ./${{ parameters.workloadUrl.split('/blob/').pop().split('/').slice(1).join('/') }}
        expression: |
          $ ~> | $ | 
            $merge([
              $, 
              {"spec": {"template": {"spec": {"containers": [
                $merge([
                  $.spec.template.spec.containers[0], 
                  {"envFrom": [{"secretRef": {"name": "central"}}]}
                ])
              ]}}}}
            ])
          |

    - id: writeTargetWorkload
      if: ${{ parameters.workloadUrl }}
      name: Write merged Workload to YAML
      action: roadiehq:utils:fs:write
      input:
        path: ./${{ parameters.workloadUrl.split('/blob/').pop().split('/').slice(1).join('/') }}
        content: ${{ steps.mergeTargetWorkload.output.result }}

    - id: fetchClusterrolebinding
      if: ${{ parameters.kustomizeUrl }}
      name: Fetch External Secret CRB
      action: fetch:plain:file
      input:
        url: ${{ parameters.crbUrl }}
        targetPath: ./${{ parameters.crbUrl.split('/blob/').pop().split('/').slice(1).join('/') }}

    - id: mergeClusterrolebinding
      if: ${{ parameters.kustomizeUrl }}
      name: Add to Resource List
      action: roadiehq:utils:merge
      input:
        path: ./${{ parameters.crbUrl.split('/blob/').pop().split('/').slice(1).join('/') }}
        mergeArrays: true
        preserveYamlComments: true
        content:
          subjects:
            - kind: ServiceAccount
              name: default
              namespace: ${{ parameters.name }}

    - id: createPullRequest
      name: Create Merge Request
      action: publish:github:pull-request
      input:
        repoUrl: github.com?repo=catalogue&owner=jDmacD
        branchName: argocd-application-${{ parameters.name }}
        update: true
        targetBranchName: main
        title: Create Postgres Database ${{ parameters.name }}
        description: |
          ## CloudNative-PG Database: ${{ parameters.name }}

          This PR creates a new PostgreSQL database using CloudNative-PG operator.

          ### Database Resources Created

          #### 1. Database User (Role)
          - **Name**: `${{ parameters.name }}`
          - **Connection Limit**: Unlimited (-1)
          - **Login**: Enabled
          - **Comment**: "${{ parameters.name }} application user"

          #### 2. Database
          - **Name**: `${{ parameters.name }}`
          - **Owner**: `${{ parameters.name }}`

          #### 3. Kubernetes Secret
          - **Name**: `${{ parameters.name }}`
          - **Type**: CloudNative-PG managed secret
          - **Contains**:
            - `username` - Database user
            - `dbname` - Database name
            - `host` - Database host
            - `port` - Database port
            - `url` - Full connection URL
            - `password` - User password

          #### 4. External Secret
          - **Name**: `${{ parameters.name }}`
          - **Namespace**: `cloudnative-pg`
          - **Purpose**: Syncs credentials to consuming applications

          {%- if parameters.kustomizeUrl or parameters.workloadUrl %}

          ### Target Application Integration

          {%- if parameters.kustomizeUrl %}

          #### Kustomization Updated
          - **File**: `${{ parameters.kustomizeUrl }}`
          - **Added Resource**: `centralexternalsecret.yaml`

          #### Central External Secret Created
          - **Name**: `central`
          - **Target Namespace**: Extracted from kustomization path
          - **Secret Key Mappings**:
          {%- if parameters.secretUsername %}
            - `username` → `${{ parameters.secretUsername }}`
          {%- endif %}
          {%- if parameters.secretDbname %}
            - `dbname` → `${{ parameters.secretDbname }}`
          {%- endif %}
          {%- if parameters.secretHost %}
            - `host` → `${{ parameters.secretHost }}`
          {%- endif %}
          {%- if parameters.secretPort %}
            - `port` → `${{ parameters.secretPort }}`
          {%- endif %}
          {%- if parameters.secretUrl %}
            - `url` → `${{ parameters.secretUrl }}`
          {%- endif %}
          {%- if parameters.secretPassword %}
            - `password` → `${{ parameters.secretPassword }}`
          {%- endif %}
          {%- endif %}

          {%- if parameters.workloadUrl %}

          #### Workload Updated
          - **File**: `${{ parameters.workloadUrl }}`
          - **Change**: Added `secretRef` to mount `central` secret as environment variables
          - **Effect**: Database credentials will be available as environment variables in the container
          {%- endif %}

          {%- if parameters.crbUrl %}

          #### RBAC Configuration
          - **File**: `${{ parameters.crbUrl }}`
          - **Added Subject**: ServiceAccount `default` in namespace `${{ parameters.name }}`
          - **Purpose**: Grants permissions for External Secrets to read from CloudNative-PG cluster
          {%- endif %}

          {%- else %}

          ### Target Application Integration
          No target application specified. The database credentials are available in the `${{ parameters.name }}` secret in the `cloudnative-pg` namespace.

          To consume this database from an application:
          1. Create an ExternalSecret in your application namespace
          2. Reference the `${{ parameters.name }}` secret from the `cloudnative-pg` namespace
          3. Mount the secret into your workload as environment variables

          {%- endif %}

          ### Files Modified

          #### CloudNative-PG Cluster Configuration
          - `cloudnative-pg/cluster/kustomize/cluster.yaml` - Added role definition
          - `cloudnative-pg/cluster/kustomize/database/kustomization.yaml` - Added database resource
          - `cloudnative-pg/cluster/kustomize/database/${{ parameters.name }}.yaml` - Database definition
          - `cloudnative-pg/cluster/kustomize/externalsecret/kustomization.yaml` - Added external secret resource
          - `cloudnative-pg/cluster/kustomize/externalsecret/${{ parameters.name }}.yaml` - External secret definition

          {%- if parameters.kustomizeUrl %}

          #### Target Application Configuration
          - `${{ parameters.kustomizeUrl }}` - Added centralexternalsecret.yaml resource
          - `${{ parameters.kustomizeUrl.split('/blob/').pop().split('/').slice(1, -1).join('/') }}/centralexternalsecret.yaml` - Created external secret for app
          {%- if parameters.workloadUrl %}
          - `${{ parameters.workloadUrl }}` - Added secret mount
          {%- endif %}
          {%- if parameters.crbUrl %}
          - `${{ parameters.crbUrl }}` - Added RBAC permissions
          {%- endif %}
          {%- endif %}

          ---

          Generated via Backstage CloudNative-PG Database Template

  output:
    links:
      - title: Pull Request Link
        url: ${{ steps['createPullRequest'].output.remoteUrl }}
